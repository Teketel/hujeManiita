package assign_one;

package comparsionOfBfandDcAlgorithms;

import Main;

public class Main {
	
	private int[] global_arry;

	private int[] merge(int[] b_array, int[] c_array) {
		// System.out.println("Merging" + b_array.toString() + " And " +
		// c_array.toString());
		int size = b_array.length + c_array.length;
		int array[] = new int[size];
		int i = 0, j = 0, k = 0;
		while ((i < b_array.length) && (j < c_array.length)) {
			if (b_array[i] <= c_array[j]) {
				array[k] = b_array[i];
				i++;
			} else {
				array[k] = c_array[j];
				j++;
			}
			k++;
		}
		if (i == b_array.length) {
			for (; j < c_array.length; j++, k++)
				array[k] = c_array[j];
		} else {
			for (; i < b_array.length; i++, k++)
				array[k] = b_array[i];
		}
		return array;

	}

	private int[] copy(int start, int end, int[] array) {
		// System.out.println("Copying  " + array.toString());
		int size = (end - start) + 1;
		int b[] = new int[size];
		for (int i = 0; i < size; i++)
			b[i] = array[start + i];
		return b;
	}

	private void swap(int i, int min_index, int[] array) {
		int temp = array[i];
		array[i] = array[min_index];
		array[min_index] = temp;

	}
	private boolean check_mtrx(int[][] mtrx_b) {
		// TODO Auto-generated method stub
		return false;
	}
	public void partion(int L, int H) {

		int p = global_arry[L + (H - L) / 2];
		int i = L;
		int j = H;

		while (i <= j) {
			while (global_arry[i] < p)
				i++;
			while (global_arry[j] > p)
				j--;
			if (i <= j) {
				swap(i, j, global_arry);
				i++;
				j--;
			}
		}
		if (L < j)
			partion(L, j);
		if (i < H)
			partion(i, H);
	}
	//====================================================

	public int[] bfSelectionSort(int array[]) {
		int min_index;
		for (int i = 0; i < array.length - 2; i++) {
			min_index = i;
			for (int j = i + 1; j < array.length; j++) {
				if (array[j] < array[min_index])
					min_index = j;
			}
			swap(i, min_index, array);

		}
		return array;

	}

	public int[] bfBubbleSort(int array[]) {

		for (int i = 0; i < array.length - 2; i++) {
			for (int j = 0; j < array.length - 1 - i; j++) {
				if (array[j + 1] < array[j])
					swap(j, j + 1, array);
			}
		}
		return array;

	}

	public int bfSequntialSearch(int key, int array[]) {
		int i = 0;
		while ((i < array.length) && (array[i] != key)) {
			i++;
		}
		if (i < array.length)
			return i;
		else
			return -1;
	}

	public int[] dcMergeSort(int array[]) {

		if (array.length > 1) {
			// System.out.println("Ms In array leng " + array.length);
			int[] b_array = copy(0, array.length / 2 - 1, array);
			int[] c_array = copy(array.length / 2, array.length - 1, array);
			int[] b = dcMergeSort(b_array);
			int[] c = dcMergeSort(c_array);
			return merge(b, c);
		}
		return array;
	}

	public int[] dcQuickSort(int array[]) {
	    int size = array.length;
	    global_arry = array;
		partion(0, size - 1);
		return global_arry;
	}

	public int dcBinarySearch(int key, int array[], int L, int R) {

		if (L > R)
			return -1;
		int m = (L + R)/2;
		if(key == array[m])
			return m;
		else {
			if (key < array[m])
				return dcBinarySearch(key, array, L, m - 1);
			else
				return dcBinarySearch(key, array, m + 1, R);
		}
	}

	public int[] dcStrassenAlgoMatrixMultiplier(int array[]) {

		if (array.length > 1) {
			// System.out.println("Ms In array leng " + array.length);
			int[] b_array = copy(0, array.length / 2 - 1, array);
			int[] c_array = copy(array.length / 2, array.length - 1, array);
			int[] b = dcMergeSort(b_array);
			int[] c = dcMergeSort(c_array);
			return merge(b, c);
		}
		return array;
	}

	public int[][] bfMatrixMultiplier(int mtrx_a[][], int mtrx_b[][]) {
		//if (check_mtrx(mrtx_a) && check_mtrx(mtrx_b)) {
		int size = mtrx_a.length;
		int mtrx_c[][] = new int[size][size];
		for(int i = 0; i < size; i++) {			
			for(int j = 0; j < size; j++) {
				mtrx_c[i][j] = 0;
				for(int k = 0; k < size; k++)
					mtrx_c[i][j] = mtrx_c[i][j] + mtrx_a[i][k] * mtrx_b[k][j];
			}
		}
		return mtrx_c;
	/*	}
		else System.out.println("Error: Please enter two NxN square matrix.");*/
	}

	public void display(int[] ar) {
		for (int i = 0; i < ar.length; i++)
			System.out.println(ar[i]);
	}
	public void diplay_mtrx(int[][] m){
		int s = m.length;
		for (int i = 0; i < s; i++){
			for(int j = 0; j < s; j++)
				System.out.print(" " + m[i][j]);
			System.out.println();
		}
	}

	public static void main(String[] args) {
		int[] grade = { 23, 30, 65, 93, 24, 75, 3, 26, 76, 35, 86, 32, 68, 84,60, 87, 9 };
		int[] srted_arry = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27};
		Main algos = new Main();
		int[] sample_input = {32, 4, 15, 34, 5};
		int[][] mtrx_a = {{5, 4, 21}, {35, 22, 9}, {0, 3, 88}};
		int[][] mtrx_b = {{23, 75, 0}, {67, 29, 0}, {35, 22, 87}};
		int[][] product_mtrx = algos.bfMatrixMultiplier(mtrx_a, mtrx_b);
		algos.diplay_mtrx(product_mtrx);
		/*int[] sorted = algos.dcQuickSort(grade);
		algos.display(sorted);
		/*
		int key = 27;
		int index = algos.dcBinarySearch(key, srted_arry, 0, srted_arry.length - 1);
		if (index != -1) {
			System.out.println("Key " + key + " found at index " + index);
		} else
			System.out.println("Error: unable to find " + key);
			*/
	}
}
