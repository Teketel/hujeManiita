#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include "cv.h"
#include "highgui.h"

void processImage(IplImage* image);
int somethingIsMoving(void);
void runDetection();
int onChange();

CvCapture* capture;
IplImage* absolute_diff_img;
IplImage* previous_img;
IplImage* average_img;
IplImage* gray_img;
int isFirstTime;
int currentContours;
int currentSurface = 0;
int surface = 1;

int main(int argc, char** argv) {
	capture = cvCaptureFromCAM(0); // capture from video device #0

	isFirstTime = 1;

	if (!cvGrabFrame(capture)) { // capture a frame
		printf("Could not grab a frame\n\7");
		exit(0);
	}

	IplImage* img = cvQueryFrame(capture);
	gray_img = cvCreateImage(cvGetSize(img), IPL_DEPTH_8U, 1);
	average_img = cvCreateImage(cvGetSize(img), IPL_DEPTH_32F, 3);
	surface = img->height * img->width;
	printf("Surface = %i", surface);

	cvNamedWindow("Detected Image", CV_WINDOW_AUTOSIZE);
	cvCreateTrackbar("Detection", "Detected Image", 25, 100, NULL);
	cvShowImage("Detected Image", img);
	int key = cvWaitKey(3000);
	runDetection();
}


	/*

	/*
	 //img = cvRetrieveFrame(capture);
	 CvVideoWriter *writer = 0;
	 int isColor = 1;
	 int fps = 30;  // or 30
	 int frameW = 640; // 744 for firewire cameras
	 int frameH = 480; // 480 for firewire cameras
	 writer = cvCreateVideoWriter("out2.avi", CV_FOURCC('P', 'I', 'M', '1'), fps,
	 cvSize(frameW, frameH), isColor);
	 IplImage* img = 0;
	 int nFrames = 950;
	 int i = 0;
	 for (i = 0; i < nFrames; i++) {
	 cvGrabFrame(capture);          // capture a frame
	 img = cvQueryFrame(capture);  // retrieve the captured frame
	 cvWriteFrame(writer, img);      // add the frame to the file

	 }


}
*/
void processImage(IplImage* image) {

	cvSmooth(image, image, CV_GAUSSIAN, 3, 0, 0, 0);
	if (isFirstTime) {
		absolute_diff_img = cvClone(image);
		previous_img = cvClone(image);
		cvConvert(image, average_img);
	} else {
		cvRunningAvg(image, average_img, 0, NULL);
	}
	cvConvert(average_img, previous_img);
	cvAbsDiff(image, previous_img, absolute_diff_img);
	cvCvtColor(absolute_diff_img, gray_img, CV_RGB2GRAY);
	cvThreshold(gray_img, gray_img, 50, 255, CV_THRESH_BINARY);
	cvDilate(gray_img, gray_img, NULL, 15);
	cvErode(gray_img, gray_img, NULL, 10);

}

int somethingIsMoving(void) {

	CvSeq* firstContour = NULL;
	CvArr* contours = cvFindContours(gray_img, cvCreateMemStorage(0), &firstContour, sizeof(CvContour), CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE, cvPoint(0,0));

	currentContours = contours;

	while (contours > 0) {
		currentSurface += cvContourArea(contours, CV_WHOLE_ARR, 0);
		contours = contours - 1;
	}
	int avg = (currentSurface * 100) / surface; // Calculate the average of contour area on the total size
	currentSurface = 0; //#Put back the current surface to 0

	if (avg > 25)
		return 1;
	else
		return 0;

}
int onChange(){
	return 25;
}
void runDetection(){
	IplImage* currentImg = cvQueryFrame(capture);
	processImage(currentImg);
	if (somethingIsMoving()){
		printf("Hello Something is moving");
	}
}

